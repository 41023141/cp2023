#include <stdio.h>
#include <gd.h>
#include <math.h>
 
void draw_chinese_flag(gdImagePtr img);
 
int main() {
    int width = 300; //  㩋戭急 㛖 蛔  摰 
    int height = 200; //  㩋戭急 埈 璅箏拿
 
    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);
 
    draw_chinese_flag(im);
 
    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, " 𦄡 湶蝝烐  湶 黆   𣺹甈ａ 頝箏黆 𪃭甈𨧀 砌 忛");
        return 1;
    }
 
    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);
 
    return 0;
}
 
// 瞉寧     draw_star   𤏸𥁒   
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);
 
void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;
 
    //  㩋戭急 埈中敹𡁜  
    red = gdImageColorAllocate(img, 255, 0, 0); // 蝏勗麯憯𢠃㭠撅暹  
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 璁𥕦 剖 𢠃  豢圻
 
    //  鍫 斤ㄙ 鼂 薗 烾 嚙 
    gdImageFilledRectangle(img, 0, 0, width, height, red);
 
    //  㞾 删    豢圻 𨫢 𤧚   誩 𤘪剨瘚    
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);
 
    //  鍫 Ｕ    豢圻
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);
 
    // 蝏魂   萘 誩 娍圻    蝝脲童撊    滩   𡒊 蛛 畾舫㩋戭急 堒圾 𪆴蝺亦㞾 𨯂 旔
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);
 
    for (int i = -1; i < 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}
 
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];
 
    //   嚗  旔   瑁  𨫢 𪊽蝪脫 樳   獈  鞟麯 剨瘚𨀣𪆴  𣈯 𣂼麪  
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;
 
    for (int i = 0; i < 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }
 
    // 瘚 楊 袿 gdImageFilledPolygon 蝻 璅箏 烾  瑁 
    gdImageFilledPolygon(img, points, 10, color);
}